#!/usr/bin/env node

/**
 * Module dependencies.
 */

var sys = require('sys')
var fs = require('fs')
var exec = require('child_process').exec;
var program = require('commander');
var databases = []
program
    .version('0.0.2')
    .parse(process.argv);
if (!program.args[0]) return console.log('No CouchDB URL provided. Quiting now.')
var couchUrl = program.args[0]
var nano = require('nano')(couchUrl)

function start() {
    increaseLimits()
}

// Increase Limits so couchapp push works correctly
function increaseLimits() {
    exec('sudo launchctl limit maxfiles 150056 150056', function doneWithLaunchCtl() {
        exec('sudo ulimit -n 150056', function doneWithUlimit() {
            return getListOfDatabases()
        })
    })
}

function getListOfDatabases() {
    fs.readdir('./databases', function doneReadDir(err, files) {
        files.forEach(function addFile(element, index, array) {
            databases.push(element.substr(0, element.length - 3))
        })
        installDatabases()
    })
}

var a = 0

function installDatabases() {
    var database = databases[a]
    if (a !== databases.length) {
        console.log("creating database " + database)
        nano.db.create(database, function(err, body) {
            if (err && err.error !== "file_exists") console.log(err)
            a++
            return installDatabases()
        })
    } else {
        return installDesignDocs()
    }
}

var b = 0

function installDesignDocs() {
    var database = databases[b]
    if (b !== databases.length) {
        if (database != "communities" && database != "languages" && database != "configurations") {
            console.log("Inserting design docs for the " + database + " database")
            exec('node_modules/.bin/couchapp push ./databases/' + database + '.js ' + couchUrl + '/' + database, function(error, stdout, stderr) {
                if (error) console.log(error);
                if (stderr) console.log(stderr);
                console.log(stdout)
                b++
                installDesignDocs()
            })
        } else {
            b++
            installDesignDocs()
        }
    } else {
		insertConfigurationDoc()
    }
}

function insertConfigurationDoc() {
	var configurations = nano.db.use('configurations');
	var confDocPath = './init_docs/ConfigurationsDoc-Nation.txt';
	fs.readFile(confDocPath, function (err, data) {
		configurations.insert(data, function (err, res) {
			if (err) {
				console.log(err);
			} else {
				console.log("configuration doc inserted successfully.");
				console.log("******************Going to insert document into languages database*******************************");
				insertLanguageDocs();
			}
			done()
		});
	});
}

function insertLanguageDocs() {
    var languages = nano.db.use('languages');
    fs.readdir('./init_docs/languages', function doneReadDir(err, files) {
        files.forEach(function (element) {
            var langList = ['Arabic.txt', 'English.txt', 'Nepali.txt', 'Spanish.txt', 'Urdu (Pakistan).txt'];
            if (langList.indexOf(element) > -1) {
		var langDocPath = './init_docs/languages/' + element;
		console.log("Inserting " + element);
		fs.readFile(langDocPath, function (err, data) {
	            languages.insert(data, function (err, res) {
                        if (err) {
		            console.log(err);
	                } else {
			    console.log(element + " doc inserted successfully.");
		    	}
		    });
	        });
	    }
        })
    });
}

function done() {
    console.log('done!')
}

//
// Trigger Start 
//

start()
